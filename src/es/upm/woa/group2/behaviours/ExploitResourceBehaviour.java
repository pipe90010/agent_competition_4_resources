package es.upm.woa.group2.behaviours;

import org.json.simple.JSONObject;

import es.upm.woa.group2.agent.AgWorld;
import es.upm.woa.group2.beans.Tribe;
import es.upm.woa.group2.beans.Unit;
import es.upm.woa.group2.common.HttpRequest;
import es.upm.woa.group2.common.MessageFormatter;
import es.upm.woa.group2.common.Printer;
import es.upm.woa.group2.rules.AgWorldRules;
import es.upm.woa.ontology.Building;
import es.upm.woa.ontology.Cell;
import es.upm.woa.ontology.CreateUnit;
import es.upm.woa.ontology.ExploitResource;
import es.upm.woa.ontology.GainedResource;
import es.upm.woa.ontology.GameOntology;
import es.upm.woa.ontology.Resource;
import jade.content.Concept;
import jade.content.ContentElement;
import jade.content.lang.Codec;
import jade.content.lang.Codec.CodecException;
import jade.content.lang.sl.SLCodec;
import jade.content.onto.Ontology;
import jade.content.onto.OntologyException;
import jade.content.onto.basic.Action;
import jade.core.AID;
import jade.core.behaviours.CyclicBehaviour;
import jade.lang.acl.ACLMessage;
import jade.lang.acl.MessageTemplate;

public class ExploitResourceBehaviour extends CyclicBehaviour {

	private AgWorld AgWorldInstance;
	private AgWorldRules worldRules;
	private Codec codec = new SLCodec();
	private Ontology ontology = GameOntology.getInstance();
	private Cell[][] map;
	
	public ExploitResourceBehaviour(AgWorld AgWorldInstance) {
		this.AgWorldInstance = AgWorldInstance;
		this.map = AgWorldInstance.getMap();
	}
	
	@Override
	public void action() {
		// Waits for creation requests
		ACLMessage msg = AgWorldInstance.receive(MessageTemplate.and(MessageTemplate.MatchPerformative(ACLMessage.REQUEST),
				MessageTemplate.MatchProtocol("ExploitResources")));
		if (msg != null) {
			try {
				ContentElement ce = null;
				if (msg.getPerformative() == ACLMessage.REQUEST) {
					ce = AgWorldInstance.getContentManager().extractContent(msg);
					// We expect an action inside the message
					if (ce instanceof Action) {
						int tribePosition = AgWorldInstance.findTribePositionByUnitAID(msg.getSender());
						Tribe tribe = AgWorldInstance.getTribes().get(tribePosition);
						Unit unit = AgWorldInstance.findUnitByAID(msg.getSender(), tribe);
						Cell currentPosition = unit.getPosition();
						
						ACLMessage reply = msg.createReply();
						reply.setLanguage(codec.getName());
						reply.setOntology(ontology.getName());
						Action agAction = new Action(msg.getSender(), new ExploitResource());
						
						
						reply = MessageFormatter.createReplyMessage(AgWorldInstance.getLocalName(), msg,
								ACLMessage.AGREE, "ExploitResources");
						
						ACLMessage informUnit = MessageFormatter.createMessage(
								AgWorldInstance.getLocalName(), ACLMessage.INFORM, "informExploitResources",
								msg.getSender());
						
						AgWorldInstance.getContentManager().fillContent(reply, agAction);
						AgWorldInstance.send(reply);
						
						unit.setAction("EXPLOITING");
						
						ExploitResource exploitAction = new ExploitResource();
						Printer.printSuccess(AgWorldInstance.getLocalName(), "Exploting from "+unit.getId().getLocalName()+" creation time started");

						Resource resource = (Resource)currentPosition.getContent();

						if(currentPosition.getContent() instanceof Building && ((Building)currentPosition.getContent()).equals(AgWorldInstance.FARM))
						{
							GainedResource gainedResource = new GainedResource();
							gainedResource.setResourceName(resource.getResourceType());
							gainedResource.setAmount(resource.getResourceAmount());
							
							exploitAction.addResourceList(gainedResource);
							
							JSONObject parameters = new JSONObject();
							parameters.put("agent_id",unit.getId().getLocalName());
							parameters.put("type", "exploit");
							HttpRequest.sendPost("/agent/start", parameters);
							
							long time = AgWorldInstance.getWorldTimer().getExploitWoodTime();							
							AgWorldInstance.doWait(time);							
						}
						else if(currentPosition.getContent() instanceof Resource)
						{
							if(resource.getResourceType()!=null|| resource.getGoldPercentage()>0 )
							{
								
								long time = AgWorldInstance.getWorldTimer().getExploitResourceTime();
										
								if(resource.getGoldPercentage()>0)
								{
									int gold = 10*resource.getGoldPercentage();
									int stone = 10*(100-resource.getGoldPercentage());
									
									GainedResource gainedGold = new GainedResource();
									gainedGold.setResourceName(GameOntology.RESOURCEACCOUNT_GOLD);
									gainedGold.setAmount(gold);
									
									GainedResource gainedStone = new GainedResource();
									gainedStone.setResourceName(GameOntology.RESOURCEACCOUNT_STONE);
									gainedStone.setAmount(stone);
									
									exploitAction.addResourceList(gainedGold);
									exploitAction.addResourceList(gainedStone);
									
									AgWorldInstance.doWait(time);

								}
								else 
								{								
									GainedResource gainedResource = new GainedResource();
									gainedResource.setResourceName(resource.getResourceType());
									gainedResource.setAmount(resource.getResourceAmount());
									
									exploitAction.addResourceList(gainedResource);
									
									AgWorldInstance.doWait(time);

								}
								
								JSONObject parameters = new JSONObject();
								parameters.put("player_id", "2");
								parameters.put("agent_id",unit.getId().getLocalName());
								parameters.put("resource", resource.getResourceType());
								parameters.put("amount", resource.getResourceAmount());
								HttpRequest.sendPost("/resource/gain",parameters);
								
								Action agActionExploited = new Action(unit.getId(), exploitAction);
								AgWorldInstance.getContentManager().fillContent(informUnit, agActionExploited);
								AgWorldInstance.send(informUnit);
							}
							else
							{
								reply = MessageFormatter.createReplyMessage(AgWorldInstance.getLocalName(), msg,
										ACLMessage.REFUSE, "ExploitResources");
							}
							AgWorldInstance.getContentManager().fillContent(reply, agAction);
							AgWorldInstance.send(reply);	
						
							
						}
						
						
					}
					else
					{
						Printer.printSuccess(AgWorldInstance.getLocalName(),
								"EXPLOIT RESOURCE MESSAGE NOT UNDERSTOOD");
						ACLMessage reply = MessageFormatter.createReplyMessage(AgWorldInstance.getLocalName(), msg,
								ACLMessage.NOT_UNDERSTOOD, null);
						AgWorldInstance.send(reply);
					}
				}
			} catch (CodecException e) {
				e.printStackTrace();
			} catch (OntologyException oe) {
				oe.printStackTrace();
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		} else {
			// If no message arrives
			block();
		}
	}

}
